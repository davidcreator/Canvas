/* ==========================================
    SE√á√ÉO 1: CONFIGURA√á√ÉO INICIAL DO CANVAS
    ========================================== */

// Obt√©m o elemento canvas e o contexto de renderiza√ß√£o 2D
const canvas = document.getElementById('gameCanvas');
const context = canvas.getContext('2d');

// Vari√°veis globais para controlar a simula√ß√£o
let components = []; // Array que armazena todos os objetos em movimento
let isRunning = true; // Controla se a anima√ß√£o est√° rodando
let animationId; // ID da anima√ß√£o para poder pausar/retomar

/* ==========================================
    SE√á√ÉO 2: DEFINI√á√ÉO DA CLASSE COMPONENT
    ========================================== */

/**
 * Classe Component - representa cada objeto que se move na tela
 * @param {number} x - posi√ß√£o horizontal inicial
 * @param {number} y - posi√ß√£o vertical inicial  
 * @param {number} size - tamanho do objeto (largura e altura)
 * @param {number} speed - velocidade de movimento
 * @param {number} angle - √¢ngulo de dire√ß√£o em radianos
 * @param {number} angleSpeed - velocidade de rota√ß√£o
 * @param {string} color - cor do objeto
 */
class Component {
    constructor(x, y, size, speed, angle, angleSpeed, color) {
        this.x = x;                    // Posi√ß√£o horizontal
        this.y = y;                    // Posi√ß√£o vertical
        this.size = size;              // Tamanho do objeto
        this.speed = speed;            // Velocidade de movimento
        this.angle = angle;            // Dire√ß√£o do movimento
        this.angleSpeed = angleSpeed;  // Velocidade de rota√ß√£o
        this.color = color;            // Cor do objeto
    }

    /**
     * M√©todo draw() - desenha o componente no canvas
     * Usa transforma√ß√µes para rotacionar o objeto
     */
    draw() {
        context.save(); // Salva o estado atual do contexto
        
        // Move a origem do contexto para a posi√ß√£o do objeto
        context.translate(this.x, this.y);
        
        // Rotaciona o contexto pelo √¢ngulo do objeto
        context.rotate(this.angle);
        
        // Define a cor de preenchimento
        context.fillStyle = this.color;
        
        // Desenha um ret√¢ngulo centralizado na origem
        context.fillRect(-this.size / 2, -this.size / 2, this.size, this.size);
        
        // Adiciona uma borda preta para melhor visualiza√ß√£o
        context.strokeStyle = '#000';
        context.lineWidth = 2;
        context.strokeRect(-this.size / 2, -this.size / 2, this.size, this.size);
        
        context.restore(); // Restaura o estado do contexto
    }

    /**
     * M√©todo update() - atualiza a posi√ß√£o e rota√ß√£o do componente
     * Tamb√©m verifica colis√µes com as bordas do canvas
     */
    update() {
        // Calcula nova posi√ß√£o usando trigonometria
        // Math.cos(angle) d√° a componente horizontal do movimento
        // Math.sin(angle) d√° a componente vertical do movimento
        this.x += this.speed * Math.cos(this.angle);
        this.y += this.speed * Math.sin(this.angle);
        
        // Atualiza o √¢ngulo de rota√ß√£o do objeto
        this.angle += this.angleSpeed;

        // DETEC√á√ÉO DE COLIS√ÉO COM BORDAS HORIZONTAIS (esquerda e direita)
        if (this.x + this.size / 2 > canvas.width || this.x - this.size / 2 < 0) {
            // Inverte o √¢ngulo horizontalmente: Math.PI - angle
            // Isso faz o objeto "ricochar" na parede vertical
            this.angle = Math.PI - this.angle;
        }
        
        // DETEC√á√ÉO DE COLIS√ÉO COM BORDAS VERTICAIS (topo e fundo)
        if (this.y + this.size / 2 > canvas.height || this.y - this.size / 2 < 0) {
            // Inverte o √¢ngulo verticalmente: -angle
            // Isso faz o objeto "ricochar" na parede horizontal
            this.angle = -this.angle;
        }

        // Desenha o componente na nova posi√ß√£o
        this.draw();
    }
}

/* ==========================================
    SE√á√ÉO 3: FUN√á√ïES DE INICIALIZA√á√ÉO
    ========================================== */

/**
 * Gera uma cor aleat√≥ria em formato hexadecimal
 * @returns {string} cor no formato #RRGGBB
 */
function getRandomColor() {
    const colors = [
        '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
        '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9'
    ];
    return colors[Math.floor(Math.random() * colors.length)];
}

/**
 * Cria os objetos Component com propriedades aleat√≥rias
 */
function createComponents() {
    components = []; // Limpa o array
    const count = parseInt(document.getElementById('objectCount').value);
    const globalSpeed = parseFloat(document.getElementById('speed').value);
    const objectSize = parseInt(document.getElementById('size').value);
    
    for (let i = 0; i < count; i++) {
        components.push(new Component(
            Math.random() * (canvas.width - objectSize) + objectSize/2,  // x aleat√≥rio
            Math.random() * (canvas.height - objectSize) + objectSize/2, // y aleat√≥rio
            objectSize,                                    // tamanho
            Math.random() * globalSpeed + 0.5,           // velocidade aleat√≥ria
            Math.random() * 2 * Math.PI,                 // √¢ngulo aleat√≥rio (0 a 2œÄ)
            (Math.random() - 0.5) * 0.05,               // rota√ß√£o aleat√≥ria
            getRandomColor()                             // cor aleat√≥ria
        ));
    }
}

/* ==========================================
    SE√á√ÉO 4: LOOP PRINCIPAL DO JOGO
    ========================================== */

/**
 * gameLoop() - Fun√ß√£o principal que roda a anima√ß√£o
 * √â chamada 60 vezes por segundo pelo requestAnimationFrame
 */
function gameLoop() {
    if (!isRunning) return; // Para a anima√ß√£o se pausada
    
    // Limpa todo o canvas (cria fundo branco)
    context.clearRect(0, 0, canvas.width, canvas.height);
    
    // Cria um fundo gradiente para ficar mais bonito
    const gradient = context.createLinearGradient(0, 0, 0, canvas.height);
    gradient.addColorStop(0, '#E3F2FD');
    gradient.addColorStop(1, '#BBDEFB');
    context.fillStyle = gradient;
    context.fillRect(0, 0, canvas.width, canvas.height);
    
    // Atualiza a posi√ß√£o e desenha cada componente
    components.forEach(component => component.update());
    
    // Solicita a pr√≥xima frame de anima√ß√£o
    animationId = requestAnimationFrame(gameLoop);
}

/* ==========================================
    SE√á√ÉO 5: FUN√á√ïES DE CONTROLE
    ========================================== */

/**
 * Reinicia a simula√ß√£o com novos objetos
 */
function resetSimulation() {
    createComponents();
    if (!isRunning) {
        isRunning = true;
        document.getElementById('pauseBtn').textContent = '‚è∏Ô∏è Pausar';
        gameLoop();
    }
}

/**
 * Pausa ou retoma a anima√ß√£o
 */
function togglePause() {
    isRunning = !isRunning;
    const btn = document.getElementById('pauseBtn');
    
    if (isRunning) {
        btn.textContent = '‚è∏Ô∏è Pausar';
        gameLoop();
    } else {
        btn.textContent = '‚ñ∂Ô∏è Continuar';
        cancelAnimationFrame(animationId);
    }
}

/**
 * Limpa completamente o canvas
 */
function clearCanvas() {
    components = [];
    context.clearRect(0, 0, canvas.width, canvas.height);
    
    // Desenha fundo gradiente
    const gradient = context.createLinearGradient(0, 0, 0, canvas.height);
    gradient.addColorStop(0, '#E3F2FD');
    gradient.addColorStop(1, '#BBDEFB');
    context.fillStyle = gradient;
    context.fillRect(0, 0, canvas.width, canvas.height);
    
    // Desenha texto explicativo
    context.fillStyle = '#666';
    context.font = '24px Arial';
    context.textAlign = 'center';
    context.fillText('Canvas limpo! Clique em "Reiniciar Simula√ß√£o"', canvas.width/2, canvas.height/2);
}

/* ==========================================
    SE√á√ÉO 6: EVENT LISTENERS E INICIALIZA√á√ÉO
    ========================================== */

// Atualiza os valores mostrados nos controles deslizantes
document.getElementById('objectCount').oninput = function() {
    document.getElementById('objectCountValue').textContent = this.value;
};

document.getElementById('speed').oninput = function() {
    document.getElementById('speedValue').textContent = this.value;
};

document.getElementById('size').oninput = function() {
    document.getElementById('sizeValue').textContent = this.value;
};

// Inicializa a aplica√ß√£o quando a p√°gina carrega
window.onload = function() {
    console.log('üéÆ Jogo de Movimento Autom√°tico inicializado!');
    console.log('üìö Esta aplica√ß√£o demonstra conceitos de:');
    console.log('   ‚Ä¢ Programa√ß√£o Orientada a Objetos');
    console.log('   ‚Ä¢ Canvas API e gr√°ficos 2D');
    console.log('   ‚Ä¢ Trigonometria e f√≠sica b√°sica');
    console.log('   ‚Ä¢ Detec√ß√£o de colis√µes');
    console.log('   ‚Ä¢ Loops de anima√ß√£o');
    
    createComponents(); // Cria os objetos iniciais
    gameLoop();         // Inicia o loop de anima√ß√£o
};

// Adiciona informa√ß√µes educativas no console
console.log(`
üéì DICAS PARA ESTUDANTES:

1. Abra o DevTools (F12) para ver este c√≥digo
2. Tente modificar os valores das propriedades
3. Observe como Math.cos() e Math.sin() criam movimento
4. Experimente diferentes √¢ngulos e velocidades
5. Estude como as colis√µes s√£o detectadas

üí° DESAFIOS:
‚Ä¢ Adicione gravidade aos objetos
‚Ä¢ Crie diferentes formas (c√≠rculos, tri√¢ngulos)
‚Ä¢ Implemente colis√µes entre objetos
‚Ä¢ Adicione efeitos de part√≠culas
‚Ä¢ Crie um sistema de pontua√ß√£o
`);