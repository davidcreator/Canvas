// ==========================================
// JAVASCRIPT - L√ìGICA DO JOGO
// ==========================================

// Vari√°veis Globais
var myGamePiece; // Vari√°vel para armazenar a pe√ßa principal do jogo (quadrado vermelho)

// ==========================================
// FUN√á√ÉO PRINCIPAL - INICIALIZA√á√ÉO DO JOGO
// ==========================================
function startGame() {
    console.log("üéÆ Iniciando o jogo..."); // Log para debugging
    myGameArea.start(); // Inicializa a √°rea do jogo (canvas e eventos)
    
    // Cria a pe√ßa principal do jogo:
    // Par√¢metros: largura, altura, cor, posi√ß√£o X inicial, posi√ß√£o Y inicial
    myGamePiece = new component(30, 30, "red", 240, 135); // Posicionado no centro do canvas
}

// ==========================================
// OBJETO - √ÅREA DO JOGO (CANVAS E CONTROLES)
// ==========================================
var myGameArea = {
    canvas: document.createElement("canvas"), // Cria um novo elemento canvas dinamicamente
    
    // M√©todo para inicializar o canvas e eventos
    start: function() {
        // Configura√ß√µes do Canvas
        this.canvas.width = 480;  // Define a largura do canvas (pixels)
        this.canvas.height = 270; // Define a altura do canvas (pixels)
        this.context = this.canvas.getContext("2d"); // Obt√©m o contexto 2D para desenhar
        
        // Insere o canvas na div game-container
        document.querySelector('.game-container').appendChild(this.canvas);
        
        // Configura o loop principal do jogo (50 FPS = 1000ms/20ms)
        this.interval = setInterval(updateGameArea, 20);
        
        // ========================================
        // SISTEMA DE CONTROLES - EVENTOS DE TECLADO
        // ========================================
        
        // Evento: Quando uma tecla √© PRESSIONADA
        window.addEventListener('keydown', function (e) {
            myGameArea.keys = (myGameArea.keys || []); // Inicializa array de teclas se n√£o existir
            myGameArea.keys[e.keyCode] = true; // Marca a tecla como pressionada
            console.log("üîΩ Tecla pressionada:", e.keyCode); // Log para debugging
        });
        
        // Evento: Quando uma tecla √© SOLTA
        window.addEventListener('keyup', function (e) {
            myGameArea.keys[e.keyCode] = false; // Marca a tecla como solta
            console.log("üîº Tecla solta:", e.keyCode); // Log para debugging
        });
    },
    
    // M√©todo para limpar o canvas a cada frame
    clear: function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
};

// ==========================================
// CLASSE - COMPONENTE DO JOGO (QUADRADO)
// ==========================================
function component(width, height, color, x, y) {
    // Propriedades Visuais
    this.width = width;   // Largura do componente (pixels)
    this.height = height; // Altura do componente (pixels)
    this.color = color;   // Cor do componente
    
    // Propriedades de Posi√ß√£o
    this.x = x; // Posi√ß√£o horizontal (coordenada X)
    this.y = y; // Posi√ß√£o vertical (coordenada Y)
    
    // Propriedades de Movimento
    this.speed = 0;     // Velocidade de movimento (pixels por frame)
    this.angle = 0;     // √Çngulo atual de rota√ß√£o (radianos)
    this.moveAngle = 0; // Velocidade de rota√ß√£o (graus por frame)
    
    // ========================================
    // M√âTODO - DESENHAR O COMPONENTE NA TELA
    // ========================================
    this.update = function() {
        var ctx = myGameArea.context; // Refer√™ncia ao contexto do canvas
        
        ctx.save(); // Salva o estado atual do contexto (importante para transforma√ß√µes)
        
        // Transforma√ß√µes: Posi√ß√£o e Rota√ß√£o
        ctx.translate(this.x, this.y); // Move a origem do canvas para a posi√ß√£o do componente
        ctx.rotate(this.angle);        // Rotaciona o canvas de acordo com o √¢ngulo do componente
        
        // Desenho do Componente
        ctx.fillStyle = this.color; // Define a cor de preenchimento
        
        // Desenha o ret√¢ngulo centralizado na origem (por isso divide por -2)
        ctx.fillRect(this.width / -2, this.height / -2, this.width, this.height);
        
        ctx.restore(); // Restaura o estado original do contexto
    };
    
    // ========================================
    // M√âTODO - CALCULAR NOVA POSI√á√ÉO
    // ========================================
    this.newPos = function() {
        // F√≠sica da Rota√ß√£o
        this.angle += this.moveAngle * Math.PI / 180; // Converte graus para radianos e aplica rota√ß√£o
        
        // F√≠sica do Movimento (baseada no √¢ngulo atual)
        this.x += this.speed * Math.sin(this.angle);  // Componente X do movimento
        this.y -= this.speed * Math.cos(this.angle);  // Componente Y do movimento (- porque Y cresce para baixo)
        
        // ========================================
        // SISTEMA DE BORDAS - IMPEDE QUE O QUADRADO SAIA DA TELA
        // ========================================
        
        // Verifica borda esquerda
        if (this.x < this.width/2) {
            this.x = this.width/2;
        }
        
        // Verifica borda direita
        if (this.x > myGameArea.canvas.width - this.width/2) {
            this.x = myGameArea.canvas.width - this.width/2;
        }
        
        // Verifica borda superior
        if (this.y < this.height/2) {
            this.y = this.height/2;
        }
        
        // Verifica borda inferior
        if (this.y > myGameArea.canvas.height - this.height/2) {
            this.y = myGameArea.canvas.height - this.height/2;
        }
    };
}

// ==========================================
// LOOP PRINCIPAL - ATUALIZA√á√ÉO DO JOGO
// ==========================================
function updateGameArea() {
    // Limpa a tela para o pr√≥ximo frame
    myGameArea.clear();
    
    // Reseta os controles do componente
    myGamePiece.moveAngle = 0; // Para de rotacionar
    myGamePiece.speed = 0;     // Para de mover
    
    // ========================================
    // SISTEMA DE CONTROLES - MAPEAMENTO DE TECLAS
    // ========================================
    
    // Verifica se existem teclas pressionadas
    if (myGameArea.keys) {
        // Tecla A (c√≥digo 65) - Rota√ß√£o para a ESQUERDA
        if (myGameArea.keys[65]) {
            myGamePiece.moveAngle = -3; // Rotaciona 3 graus por frame no sentido anti-hor√°rio
        }
        
        // Tecla D (c√≥digo 68) - Rota√ß√£o para a DIREITA  
        if (myGameArea.keys[68]) {
            myGamePiece.moveAngle = 3; // Rotaciona 3 graus por frame no sentido hor√°rio
        }
        
        // Tecla W (c√≥digo 87) - Movimento para FRENTE
        if (myGameArea.keys[87]) {
            myGamePiece.speed = 2; // Move 2 pixels por frame na dire√ß√£o que est√° apontando
        }
        
        // Tecla S (c√≥digo 83) - Movimento para TR√ÅS
        if (myGameArea.keys[83]) {
            myGamePiece.speed = -2; // Move 2 pixels por frame na dire√ß√£o contr√°ria
        }
    }
    
    // Atualiza a f√≠sica do jogo
    myGamePiece.newPos(); // Calcula a nova posi√ß√£o baseada nos controles
    myGamePiece.update(); // Desenha o componente na nova posi√ß√£o
}

// ==========================================
// INFORMA√á√ïES ADICIONAIS PARA OS ALUNOS
// ==========================================

/*
üìö CONCEITOS IMPORTANTES DEMONSTRADOS NESTE C√ìDIGO:

1. üé® CANVAS HTML5: 
    - Elemento para desenhar gr√°ficos em tempo real
    - Context 2D para opera√ß√µes de desenho

2. üéÆ GAME LOOP: 
    - setInterval() para criar um loop cont√≠nuo
    - 50 FPS (20ms de intervalo)

3. üéØ SISTEMA DE COORDENADAS:
    - (0,0) fica no canto superior esquerdo
    - X cresce para a direita, Y cresce para baixo

4. üîÑ TRANSFORMA√á√ïES:
    - translate(): move o ponto de origem
    - rotate(): rotaciona o contexto
    - save()/restore(): salva/restaura estado

5. ‚å®Ô∏è EVENTOS DE TECLADO:
    - keydown: quando tecla √© pressionada
    - keyup: quando tecla √© solta
    - keyCode: c√≥digo num√©rico da tecla

6. üìê TRIGONOMETRIA:
    - Math.sin() e Math.cos() para movimento circular
    - Convers√£o de graus para radianos (œÄ/180)

7. üé≤ ORIENTA√á√ÉO A OBJETOS:
    - Fun√ß√£o construtora component()
    - M√©todos update() e newPos()
    - Propriedades do objeto

‚ö° DESAFIOS PARA OS ALUNOS:
- Adicionar mais pe√ßas no jogo
- Criar obst√°culos
- Implementar sistema de pontua√ß√£o
- Adicionar sons
- Mudar cores dinamicamente
*/