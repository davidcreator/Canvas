/* ====================================
    üéÆ JOGO DE MOVIMENTO E ROTA√á√ÉO
    
    Este script demonstra conceitos fundamentais:
    - Manipula√ß√£o do Canvas HTML5
    - Movimento usando trigonometria
    - Rota√ß√£o de objetos 2D
    - Loop de anima√ß√£o
    - Detec√ß√£o de colis√µes simples
    ==================================== */

// ====================================
// üìã CONFIGURA√á√ÉO INICIAL DO CANVAS
// ====================================

// Obt√©m refer√™ncia do elemento canvas do HTML
const canvas = document.getElementById('gameCanvas');

// Obt√©m o contexto 2D para desenhar no canvas
const context = canvas.getContext('2d');

console.log('üéØ Canvas inicializado com sucesso!');
console.log(`üìè Dimens√µes: ${canvas.width} x ${canvas.height} pixels`);

// ====================================
// üîß VARI√ÅVEIS DO OBJETO (QUADRADO)
// ====================================

// Posi√ß√£o inicial do quadrado (centro do canvas)
let x = canvas.width / 2;  // Posi√ß√£o horizontal (eixo X)
let y = canvas.height / 2; // Posi√ß√£o vertical (eixo Y)

// Propriedades f√≠sicas do quadrado
const size = 50;           // Tamanho do quadrado em pixels
let angle = 0;             // √Çngulo de rota√ß√£o em radianos (0 = apontando para direita)
const speed = 2;           // Velocidade de movimento em pixels por frame
const rotationSpeed = 0.01; // Velocidade de rota√ß√£o em radianos por frame

console.log('üé≤ Objeto inicializado:', { x, y, size, angle, speed });

// ====================================
// üé® FUN√á√ÉO DE DESENHO DO QUADRADO
// ====================================

function drawComponent() {
    // Limpa todo o canvas para a pr√≥xima frame
    context.clearRect(0, 0, canvas.width, canvas.height);
    
    // IMPORTANTE: Salva o estado atual do contexto
    // Isso permite restaurar as configura√ß√µes originais depois
    context.save();
    
    // ====================================
    // üîÑ SISTEMA DE TRANSFORMA√á√ïES 2D
    // ====================================
    
    // 1. Move o ponto de origem para a posi√ß√£o do quadrado
    context.translate(x, y);
    
    // 2. Rotaciona o sistema de coordenadas
    context.rotate(angle);
    
    // ====================================
    // üé® DESENHO DO QUADRADO
    // ====================================
    
    // Define a cor de preenchimento
    context.fillStyle = '#e74c3c'; // Vermelho vibrante
    
    // Desenha o quadrado centralizado no ponto de origem
    // Usamos -size/2 para centralizar o quadrado na posi√ß√£o
    context.fillRect(-size / 2, -size / 2, size, size);
    
    // Adiciona uma borda para melhor visualiza√ß√£o
    context.strokeStyle = '#c0392b'; // Vermelho mais escuro
    context.lineWidth = 2;
    context.strokeRect(-size / 2, -size / 2, size, size);
    
    // IMPORTANTE: Restaura o estado original do contexto
    // Remove todas as transforma√ß√µes aplicadas
    context.restore();
}

// ====================================
// üöÄ FUN√á√ÉO DE ATUALIZA√á√ÉO DO MOVIMENTO
// ====================================

function updatePosition() {
    // ====================================
    // üìê C√ÅLCULO DO MOVIMENTO USANDO TRIGONOMETRIA
    // ====================================
    
    // cos(angle) = componente horizontal do movimento
    // sin(angle) = componente vertical do movimento
    // Multiplicamos pela velocidade para controlar a rapidez
    
    const deltaX = speed * Math.cos(angle); // Mudan√ßa na posi√ß√£o X
    const deltaY = speed * Math.sin(angle); // Mudan√ßa na posi√ß√£o Y
    
    // Atualiza a posi√ß√£o do quadrado
    x += deltaX;
    y += deltaY;
    
    // ====================================
    // üîÑ ROTA√á√ÉO AUTOM√ÅTICA
    // ====================================
    
    // Incrementa o √¢ngulo para criar rota√ß√£o cont√≠nua
    angle += rotationSpeed;
    
    // ====================================
    // üõ°Ô∏è DETEC√á√ÉO DE COLIS√ÉO COM AS BORDAS
    // ====================================
    
    // Calcula os limites do quadrado considerando seu tamanho
    const halfSize = size / 2;
    
    // Verifica colis√£o com cada borda do canvas
    const hitLeftEdge = x - halfSize < 0;                    // Borda esquerda
    const hitRightEdge = x + halfSize > canvas.width;        // Borda direita  
    const hitTopEdge = y - halfSize < 0;                     // Borda superior
    const hitBottomEdge = y + halfSize > canvas.height;      // Borda inferior
    
    // Se colidiu com qualquer borda, muda a dire√ß√£o
    if (hitLeftEdge || hitRightEdge || hitTopEdge || hitBottomEdge) {
        // Gira 90 graus (œÄ/2 radianos) para mudar de dire√ß√£o
        angle += Math.PI / 2;
        
        // Log para fins educacionais
        console.log('üí• Colis√£o detectada! Nova dire√ß√£o:', angle.toFixed(2), 'radianos');
        
        // Ajusta posi√ß√£o para evitar ficar preso nas bordas
        if (hitLeftEdge) x = halfSize;
        if (hitRightEdge) x = canvas.width - halfSize;
        if (hitTopEdge) y = halfSize;
        if (hitBottomEdge) y = canvas.height - halfSize;
    }
    
    // Redesenha o quadrado na nova posi√ß√£o
    drawComponent();
}

// ====================================
// üé¨ LOOP PRINCIPAL DO JOGO
// ====================================

function gameLoop() {
    // Atualiza a posi√ß√£o e rota√ß√£o do quadrado
    updatePosition();
    
    // requestAnimationFrame sincroniza com a taxa de atualiza√ß√£o do monitor
    // Geralmente 60 FPS, criando anima√ß√£o suave
    requestAnimationFrame(gameLoop);
}

// ====================================
// üöÄ INICIALIZA√á√ÉO DO JOGO
// ====================================

console.log('üéÆ Iniciando o jogo...');
console.log('üìö Este exemplo demonstra:');
console.log('   - Canvas HTML5 e contexto 2D');
console.log('   - Trigonometria aplicada (seno e cosseno)');
console.log('   - Transforma√ß√µes 2D (transla√ß√£o e rota√ß√£o)');
console.log('   - Loop de anima√ß√£o com requestAnimationFrame');
console.log('   - Detec√ß√£o de colis√µes simples');

// Inicia o loop principal do jogo
gameLoop();

// Desenho inicial
drawComponent();