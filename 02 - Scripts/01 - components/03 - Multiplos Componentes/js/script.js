 // ====================================
        // üéÆ SISTEMA DE JOGO CANVAS
        // ====================================
        
        // === VARI√ÅVEIS GLOBAIS ===
        // Estas vari√°veis armazenam nossas pe√ßas do jogo
        let pecaVermelha;    // Pe√ßa 1: vermelha
        let pecaAzul;        // Pe√ßa 2: azul  
        let pecaVerde;       // Pe√ßa 3: verde
        let pecaAmarela;     // Pe√ßa 4: amarela
        
        // === CONFIGURA√á√ïES DO JOGO ===
        const LARGURA_CANVAS = 480;  // Largura da √°rea de jogo
        const ALTURA_CANVAS = 270;   // Altura da √°rea de jogo
        const FPS = 50; // Frames por segundo (1000ms / 20ms = 50 FPS)
        
        // ====================================
        // üèóÔ∏è SISTEMA DE √ÅREA DE JOGO
        // ====================================
        const areaDoJogo = {
            // Propriedades da √°rea de jogo
            canvas: null,
            contexto: null,
            intervalo: null,
            
            /**
             * Inicializa a √°rea de jogo
             * Cria o canvas, define suas dimens√µes e inicia o loop de jogo
             */
            iniciar: function() {
                console.log("üöÄ Iniciando √°rea de jogo...");
                
                // Cria um novo elemento canvas
                this.canvas = document.createElement("canvas");
                this.canvas.width = LARGURA_CANVAS;
                this.canvas.height = ALTURA_CANVAS;
                
                // Obt√©m o contexto 2D para desenhar
                this.contexto = this.canvas.getContext("2d");
                
                // Adiciona o canvas ao documento
                document.querySelector('.container').appendChild(this.canvas);
                
                // Inicia o loop de jogo (atualiza a cada 20ms = 50 FPS)
                this.intervalo = setInterval(atualizarJogo, 1000 / FPS);
                
                console.log("‚úÖ √Årea de jogo inicializada!");
            },
            
            /**
             * Limpa toda a √°rea do canvas
             * Remove todos os desenhos anteriores
             */
            limpar: function() {
                this.contexto.clearRect(0, 0, this.canvas.width, this.canvas.height);
            }
        };
        
        // ====================================
        // üß© CLASSE COMPONENTE (PE√áA DO JOGO)
        // ====================================
        
        /**
         * Construtor para criar uma pe√ßa do jogo
         * @param {number} largura - Largura da pe√ßa em pixels
         * @param {number} altura - Altura da pe√ßa em pixels  
         * @param {string} cor - Cor da pe√ßa (nome ou c√≥digo hex)
         * @param {number} posicaoX - Posi√ß√£o inicial no eixo X
         * @param {number} posicaoY - Posi√ß√£o inicial no eixo Y
         */
        function Componente(largura, altura, cor, posicaoX, posicaoY) {
            // === PROPRIEDADES DA PE√áA ===
            this.largura = largura;
            this.altura = altura;
            this.cor = cor;
            this.x = posicaoX;
            this.y = posicaoY;
            
            /**
             * Desenha esta pe√ßa no canvas
             * Usa o contexto 2D para desenhar um ret√¢ngulo colorido
             */
            this.desenhar = function() {
                const ctx = areaDoJogo.contexto;
                
                // Define a cor de preenchimento
                ctx.fillStyle = this.cor;
                
                // Desenha o ret√¢ngulo na posi√ß√£o especificada
                ctx.fillRect(this.x, this.y, this.largura, this.altura);
            };
            
            /**
             * Atualiza esta pe√ßa (por enquanto s√≥ desenha)
             * Em jogos mais complexos, aqui calcularia movimento, colis√µes, etc.
             */
            this.atualizar = function() {
                this.desenhar();
            };
        }
        
        // ====================================
        // üéØ FUN√á√ïES PRINCIPAIS DO JOGO
        // ====================================
        
        /**
         * Inicializa o jogo
         * Cria a √°rea de jogo e todas as pe√ßas
         */
        function iniciarJogo() {
            console.log("üéÆ Iniciando jogo...");
            
            // Inicializa a √°rea de jogo
            areaDoJogo.iniciar();
            
            // === CRIA√á√ÉO DAS PE√áAS ===
            // Cada pe√ßa tem: largura, altura, cor, posi√ß√£o X, posi√ß√£o Y
            
            pecaVermelha = new Componente(30, 30, "red", 10, 120);
            console.log("üî¥ Pe√ßa vermelha criada: 30x30 na posi√ß√£o (10, 120)");
            
            pecaAzul = new Componente(50, 50, "blue", 300, 150);  
            console.log("üîµ Pe√ßa azul criada: 50x50 na posi√ß√£o (300, 150)");
            
            pecaVerde = new Componente(20, 20, "green", 50, 50);
            console.log("üü¢ Pe√ßa verde criada: 20x20 na posi√ß√£o (50, 50)");
            
            pecaAmarela = new Componente(40, 40, "yellow", 200, 100);
            console.log("üü° Pe√ßa amarela criada: 40x40 na posi√ß√£o (200, 100)");
            
            console.log("‚úÖ Jogo iniciado com sucesso! 4 pe√ßas criadas.");
        }
        
        /**
         * Atualiza o jogo a cada frame
         * Esta fun√ß√£o √© chamada 50 vezes por segundo
         */
        function atualizarJogo() {
            // 1. Limpa a tela (remove desenhos anteriores)
            areaDoJogo.limpar();
            
            // 2. Atualiza e desenha todas as pe√ßas
            pecaVermelha.atualizar();
            pecaAzul.atualizar();
            pecaVerde.atualizar();
            pecaAmarela.atualizar();
        }
        
        // ====================================
        // üöÄ INICIALIZA√á√ÉO AUTOM√ÅTICA
        // ====================================
        
        // Quando a p√°gina terminar de carregar, inicia o jogo
        window.addEventListener('load', iniciarJogo);
        
        console.log("üìù Script carregado! Aguardando p√°gina carregar...");