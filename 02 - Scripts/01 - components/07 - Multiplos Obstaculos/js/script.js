// ===== VARI√ÅVEIS GLOBAIS =====
// Arrays para armazenar os elementos do jogo
let gameComponents = [];  // Pe√ßas coloridas do jogo
let gameObstacles = [];   // Obst√°culos pretos
let gameRunning = false;  // Controla se o jogo est√° rodando
let gameInterval;         // Armazena o intervalo de atualiza√ß√£o

// ===== CONFIGURA√á√ïES DO JOGO =====
const GAME_CONFIG = {
    canvasWidth: 600,     // Largura do canvas
    canvasHeight: 400,    // Altura do canvas
    updateSpeed: 30,      // Velocidade de atualiza√ß√£o (menor = mais r√°pido)
    maxComponents: 8,     // N√∫mero m√°ximo de componentes
    maxObstacles: 6       // N√∫mero m√°ximo de obst√°culos
};

// ===== √ÅREA DO JOGO =====
const gameArea = {
    // Propriedades do canvas
    canvas: null,
    context: null,
    
    // M√©todo para inicializar o canvas
    initialize: function() {
        console.log("üéØ Inicializando √°rea do jogo...");
        
        // Cria o elemento canvas
        this.canvas = document.createElement("canvas");
        this.canvas.width = GAME_CONFIG.canvasWidth;
        this.canvas.height = GAME_CONFIG.canvasHeight;
        
        // Obt√©m o contexto 2D para desenhar
        this.context = this.canvas.getContext("2d");
        
        // Adiciona o canvas √† p√°gina
        const container = document.querySelector('.container');
        const controls = document.querySelector('.controls');
        container.insertBefore(this.canvas, controls.nextSibling);
        
        console.log("‚úÖ Canvas criado com sucesso!");
    },
    
    // M√©todo para limpar o canvas
    clear: function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
};

// ===== CLASSE PARA COMPONENTES DO JOGO =====
class GameComponent {
    constructor(width, height, color, x, y, type = 'component') {
        this.width = width;   // Largura do componente
        this.height = height; // Altura do componente
        this.color = color;   // Cor do componente
        this.x = x;          // Posi√ß√£o horizontal
        this.y = y;          // Posi√ß√£o vertical
        this.type = type;    // Tipo (component ou obstacle)
        
        console.log(`üî∑ Criado ${type}: ${color} (${width}x${height}) na posi√ß√£o (${x}, ${y})`);
    }
    
    // M√©todo para desenhar o componente no canvas
    draw() {
        const ctx = gameArea.context;
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        // Adiciona uma borda para melhor visualiza√ß√£o
        ctx.strokeStyle = '#2c3e50';
        ctx.lineWidth = 1;
        ctx.strokeRect(this.x, this.y, this.width, this.height);
    }
}

// ===== FUN√á√ïES PARA CRIAR ELEMENTOS =====

function createGameComponents() {
    console.log("üé® Criando componentes coloridos...");
    
    // Array com cores vibrantes
    const colors = ['#e74c3c', '#3498db', '#2ecc71', '#f39c12', 
                    '#9b59b6', '#e67e22', '#1abc9c', '#34495e'];
    
    // Limpa o array anterior
    gameComponents = [];
    
    // Cria componentes com propriedades variadas
    for (let i = 0; i < GAME_CONFIG.maxComponents; i++) {
        const component = new GameComponent(
            getRandomSize(20, 60),        // Largura aleat√≥ria
            getRandomSize(20, 60),        // Altura aleat√≥ria
            colors[i % colors.length],    // Cor da lista
            getRandomPosition(GAME_CONFIG.canvasWidth - 60),   // Posi√ß√£o X
            getRandomPosition(GAME_CONFIG.canvasHeight - 60),  // Posi√ß√£o Y
            'component'
        );
        gameComponents.push(component);
    }
    
    console.log(`‚úÖ Criados ${gameComponents.length} componentes`);
}

function createGameObstacles() {
    console.log("üöß Criando obst√°culos...");
    
    // Limpa o array anterior
    gameObstacles = [];
    
    // Cria obst√°culos pretos
    for (let i = 0; i < GAME_CONFIG.maxObstacles; i++) {
        const obstacle = new GameComponent(
            getRandomSize(15, 40),        // Largura aleat√≥ria
            getRandomSize(80, 150),       // Altura aleat√≥ria (mais altos)
            '#2c3e50',                    // Cor preta/cinza escuro
            getRandomPosition(GAME_CONFIG.canvasWidth - 40),   // Posi√ß√£o X
            getRandomPosition(GAME_CONFIG.canvasHeight - 150), // Posi√ß√£o Y
            'obstacle'
        );
        gameObstacles.push(obstacle);
    }
    
    console.log(`‚úÖ Criados ${gameObstacles.length} obst√°culos`);
}

// ===== FUN√á√ïES AUXILIARES =====

function getRandomSize(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getRandomPosition(max) {
    return Math.floor(Math.random() * max);
}

// ===== FUN√á√ïES DE CONTROLE DO JOGO =====

function startGame() {
    console.log("üöÄ Iniciando o jogo...");
    
    // Inicializa o canvas se ainda n√£o foi criado
    if (!gameArea.canvas) {
        gameArea.initialize();
    }
    
    // Cria os elementos do jogo
    createGameComponents();
    createGameObstacles();
    
    // Atualiza os contadores na tela
    updateStats();
    
    // Inicia o loop de atualiza√ß√£o se n√£o estiver rodando
    if (!gameRunning) {
        gameInterval = setInterval(updateGame, GAME_CONFIG.updateSpeed);
        gameRunning = true;
        console.log("‚úÖ Jogo iniciado!");
    }
}

function pauseGame() {
    if (gameRunning) {
        clearInterval(gameInterval);
        gameRunning = false;
        console.log("‚è∏Ô∏è Jogo pausado");
    } else if (gameArea.canvas) {
        gameInterval = setInterval(updateGame, GAME_CONFIG.updateSpeed);
        gameRunning = true;
        console.log("‚ñ∂Ô∏è Jogo retomado");
    }
}

function resetGame() {
    console.log("üîÑ Reiniciando o jogo...");
    
    // Para o jogo
    if (gameRunning) {
        clearInterval(gameInterval);
        gameRunning = false;
    }
    
    // Limpa os arrays
    gameComponents = [];
    gameObstacles = [];
    
    // Limpa o canvas se existir
    if (gameArea.canvas) {
        gameArea.clear();
    }
    
    // Atualiza os contadores
    updateStats();
    
    console.log("‚úÖ Jogo reiniciado");
}

// ===== LOOP PRINCIPAL DO JOGO =====

function updateGame() {
    // Limpa a tela
    gameArea.clear();
    
    // Desenha todos os componentes
    gameComponents.forEach(component => {
        component.draw();
    });
    
    // Desenha todos os obst√°culos
    gameObstacles.forEach(obstacle => {
        obstacle.draw();
    });
}

// ===== FUN√á√ÉO PARA ATUALIZAR ESTAT√çSTICAS =====

function updateStats() {
    document.getElementById('componentCount').textContent = gameComponents.length;
    document.getElementById('obstacleCount').textContent = gameObstacles.length;
}

// ===== INICIALIZA√á√ÉO =====

// Quando a p√°gina carregar, mostra uma mensagem
window.addEventListener('load', function() {
    console.log("üìñ P√°gina carregada! Clique em 'Iniciar Jogo' para come√ßar.");
    console.log("üí° Abra o Console do Desenvolvedor (F12) para ver as mensagens detalhadas!");
});