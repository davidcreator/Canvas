/* ==========================================
   TUTORIAL: SISTEMA DE RPG COM HUD - JAVASCRIPT
   ==========================================
   
   Este arquivo JavaScript controla toda a l√≥gica de um sistema
   b√°sico de RPG com interface HUD interativa.
   
   FUNCIONALIDADES:
   - Sistema de status do jogador (vida, mana, experi√™ncia, ouro)
   - Atualiza√ß√£o din√¢mica da interface HUD
   - Sistema de combate b√°sico
   - Sistema de regenera√ß√£o e recompensas
   - Loop principal do jogo
   
   SE√á√ïES:
   1. Sele√ß√£o de Elementos DOM
   2. Configura√ß√µes e Vari√°veis do Jogo
   3. Fun√ß√µes de Interface (HUD)
   4. Sistema de Status do Jogador
   5. Fun√ß√µes de Gameplay
   6. Sistema de Canvas e Desenho
   7. Loop Principal do Jogo
*/

console.log("üéÆ Iniciando Tutorial: Sistema de RPG com HUD");
console.log("üìö Arquivo: script.js - Sistema completo de jogo RPG");

/* ==========================================
   1. SELE√á√ÉO DE ELEMENTOS DOM
   ========================================== */

// ELEMENTOS DO CANVAS
// Seleciona o canvas onde o jogo ser√° desenhado
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
console.log("‚úÖ Canvas do jogo selecionado");

// ELEMENTOS DA INTERFACE HUD
// Seleciona todas as barras de status da interface
const healthBar = document.getElementById('health-bar');
const manaBar = document.getElementById('mana-bar');
const expBar = document.getElementById('exp-bar');

// Seleciona os elementos de texto das barras
const healthText = document.getElementById('health-text');
const manaText = document.getElementById('mana-text');
const expText = document.getElementById('exp-text');
const goldDisplay = document.getElementById('gold-display');

console.log("‚úÖ Elementos da HUD selecionados");

/* ==========================================
   2. CONFIGURA√á√ïES E VARI√ÅVEIS DO JOGO
   ========================================== */

// STATUS DO JOGADOR
// Objeto que cont√©m todos os atributos do jogador
const player = {
    // Status de combate
    health: 100,        // Vida atual do jogador (0-100)
    maxHealth: 100,     // Vida m√°xima do jogador
    mana: 100,          // Mana atual do jogador (0-100)
    maxMana: 100,       // Mana m√°xima do jogador
    
    // Sistema de progress√£o
    experience: 0,      // Experi√™ncia atual (0-100)
    maxExperience: 100, // Experi√™ncia necess√°ria para subir de n√≠vel
    level: 1,           // N√≠vel atual do jogador
    
    // Recursos
    gold: 0,            // Quantidade de ouro possu√≠da
    
    // Posi√ß√£o no canvas (para futuras implementa√ß√µes)
    x: 400,             // Posi√ß√£o horizontal
    y: 200              // Posi√ß√£o vertical
};

// CONFIGURA√á√ïES DO JOGO
const gameConfig = {
    // Taxa de regenera√ß√£o autom√°tica
    healthRegenRate: 1,     // Vida recuperada por segundo
    manaRegenRate: 2,       // Mana recuperada por segundo
    
    // Limites de dano
    minDamage: 5,           // Dano m√≠nimo por ataque
    maxDamage: 20,          // Dano m√°ximo por ataque
    
    // Sistema de experi√™ncia
    expPerAction: 10,       // EXP ganha por a√ß√£o
    goldPerAction: 25       // Ouro ganho por a√ß√£o
};

console.log("‚öôÔ∏è Configura√ß√µes do jogador inicializadas:", player);

/* ==========================================
   3. FUN√á√ïES DE INTERFACE (HUD)
   ========================================== */

/**
 * FUN√á√ÉO: updateHUD()
 * DESCRI√á√ÉO: Atualiza toda a interface do usu√°rio com os valores atuais
 * PAR√ÇMETROS: Nenhum
 * RETORNO: void
 */
function updateHUD() {
    // ATUALIZAR BARRA DE VIDA
    // Calcula a porcentagem de vida atual
    const healthPercentage = (player.health / player.maxHealth) * 100;
    healthBar.style.width = healthPercentage + '%';
    healthText.textContent = `${player.health}/${player.maxHealth}`;
    
    // ATUALIZAR BARRA DE MANA  
    // Calcula a porcentagem de mana atual
    const manaPercentage = (player.mana / player.maxMana) * 100;
    manaBar.style.width = manaPercentage + '%';
    manaText.textContent = `${player.mana}/${player.maxMana}`;
    
    // ATUALIZAR BARRA DE EXPERI√äNCIA
    // Calcula a porcentagem de experi√™ncia atual
    const expPercentage = (player.experience / player.maxExperience) * 100;
    expBar.style.width = expPercentage + '%';
    expText.textContent = `${player.experience}/${player.maxExperience}`;
    
    // ATUALIZAR DISPLAY DE OURO
    goldDisplay.textContent = player.gold.toLocaleString();
    
    // Log para debug (pode ser removido em produ√ß√£o)
    console.log(`üìä HUD atualizada - Vida: ${player.health}, Mana: ${player.mana}, EXP: ${player.experience}, Ouro: ${player.gold}`);
}

/* ==========================================
   4. SISTEMA DE STATUS DO JOGADOR
   ========================================== */

/**
 * FUN√á√ÉO: loseHealth()
 * DESCRI√á√ÉO: Remove vida do jogador com valida√ß√£o de limites
 * PAR√ÇMETROS: damage (number) - quantidade de dano recebido
 * RETORNO: boolean - true se o jogador ainda est√° vivo
 */
function loseHealth(damage) {
    console.log(`‚öîÔ∏è Jogador recebeu ${damage} de dano`);
    
    // Subtrai o dano da vida atual
    player.health -= damage;
    
    // Garante que a vida n√£o fique negativa
    if (player.health < 0) {
        player.health = 0;
        console.log("üíÄ Jogador foi derrotado!");
        alert("GAME OVER! Voc√™ foi derrotado!");
    }
    
    // Atualiza a interface
    updateHUD();
    
    // Retorna se o jogador ainda est√° vivo
    return player.health > 0;
}

/**
 * FUN√á√ÉO: restoreHealth()
 * DESCRI√á√ÉO: Restaura vida do jogador at√© o m√°ximo
 * PAR√ÇMETROS: amount (number) - quantidade de vida a restaurar
 * RETORNO: void
 */
function restoreHealth(amount) {
    console.log(`‚ù§Ô∏è Jogador recuperou ${amount} de vida`);
    
    // Adiciona vida sem ultrapassar o m√°ximo
    player.health = Math.min(player.health + amount, player.maxHealth);
    
    // Atualiza a interface
    updateHUD();
}

/**
 * FUN√á√ÉO: useMana()
 * DESCRI√á√ÉO: Consome mana do jogador para habilidades
 * PAR√ÇMETROS: cost (number) - custo de mana da habilidade
 * RETORNO: boolean - true se havia mana suficiente
 */
function useMana(cost) {
    // Verifica se h√° mana suficiente
    if (player.mana < cost) {
        console.log(`üíô Mana insuficiente! Necess√°rio: ${cost}, Atual: ${player.mana}`);
        alert("Mana insuficiente!");
        return false;
    }
    
    console.log(`üíô Jogador usou ${cost} de mana`);
    
    // Subtrai o custo da mana atual
    player.mana -= cost;
    
    // Garante que a mana n√£o fique negativa
    if (player.mana < 0) {
        player.mana = 0;
    }
    
    // Atualiza a interface
    updateHUD();
    
    return true;
}

/**
 * FUN√á√ÉO: restoreMana()
 * DESCRI√á√ÉO: Restaura mana do jogador
 * PAR√ÇMETROS: amount (number) - quantidade de mana a restaurar
 * RETORNO: void
 */
function restoreMana(amount) {
    console.log(`üíô Jogador recuperou ${amount} de mana`);
    
    // Adiciona mana sem ultrapassar o m√°ximo
    player.mana = Math.min(player.mana + amount, player.maxMana);
    
    // Atualiza a interface
    updateHUD();
}

/* ==========================================
   5. FUN√á√ïES DE GAMEPLAY
   ========================================== */

/**
 * FUN√á√ÉO: gainExperience()
 * DESCRI√á√ÉO: Adiciona experi√™ncia e verifica se subiu de n√≠vel
 * PAR√ÇMETROS: amount (number) - quantidade de experi√™ncia ganha
 * RETORNO: void
 */
function gainExperience(amount) {
    console.log(`‚≠ê Jogador ganhou ${amount} de experi√™ncia`);
    
    // Adiciona experi√™ncia
    player.experience += amount;
    
    // Verifica se subiu de n√≠vel
    if (player.experience >= player.maxExperience) {
        levelUp();
    }
    
    // Atualiza a interface
    updateHUD();
}

/**
 * FUN√á√ÉO: gainGold()
 * DESCRI√á√ÉO: Adiciona ouro ao invent√°rio do jogador
 * PAR√ÇMETROS: amount (number) - quantidade de ouro ganha
 * RETORNO: void
 */
function gainGold(amount) {
    console.log(`ü™ô Jogador ganhou ${amount} de ouro`);
    
    // Adiciona ouro
    player.gold += amount;
    
    // Atualiza a interface
    updateHUD();
}

/**
 * FUN√á√ÉO: levelUp()
 * DESCRI√á√ÉO: Sistema de aumento de n√≠vel
 * PAR√ÇMETROS: Nenhum
 * RETORNO: void
 */
function levelUp() {
    console.log(`üéâ LEVEL UP! N√≠vel ${player.level} ‚Üí ${player.level + 1}`);
    
    // Aumenta o n√≠vel
    player.level++;
    
    // Reset da experi√™ncia
    player.experience = 0;
    
    // Aumenta atributos ao subir de n√≠vel
    player.maxHealth += 10;
    player.maxMana += 10;
    player.health = player.maxHealth; // Vida completa ao subir de n√≠vel
    player.mana = player.maxMana;     // Mana completa ao subir de n√≠vel
    
    // Notifica o jogador
    alert(`üéâ LEVEL UP! Agora voc√™ est√° no n√≠vel ${player.level}!\n+10 Vida M√°xima\n+10 Mana M√°xima`);
    
    // Atualiza a interface
    updateHUD();
}

/**
 * FUN√á√ÉO: resetStats()
 * DESCRI√á√ÉO: Reseta todos os status do jogador
 * PAR√ÇMETROS: Nenhum
 * RETORNO: void
 */
function resetStats() {
    console.log("üîÑ Resetando status do jogador");
    
    // Reseta todos os valores para o padr√£o
    player.health = 100;
    player.maxHealth = 100;
    player.mana = 100;
    player.maxMana = 100;
    player.experience = 0;
    player.maxExperience = 100;
    player.level = 1;
    player.gold = 0;
    
    // Atualiza a interface
    updateHUD();
    
    console.log("‚úÖ Status resetado com sucesso");
}

/* ==========================================
   6. SISTEMA DE CANVAS E DESENHO
   ========================================== */

/**
 * FUN√á√ÉO: drawGame()
 * DESCRI√á√ÉO: Desenha todos os elementos visuais no canvas
 * PAR√ÇMETROS: Nenhum
 * RETORNO: void
 */
function drawGame() {
    // LIMPAR O CANVAS
    // Remove todo o conte√∫do anterior do canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // DESENHAR FUNDO DECORATIVO
    // Cria um padr√£o de grade para o fundo
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 1;
    
    // Linhas verticais
    for (let x = 0; x < canvas.width; x += 50) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
    }
    
    // Linhas horizontais
    for (let y = 0; y < canvas.height; y += 50) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
    }
    
    // DESENHAR PERSONAGEM
    // Desenha um c√≠rculo representando o jogador
    ctx.fillStyle = '#4CAF50';
    ctx.beginPath();
    ctx.arc(player.x, player.y, 20, 0, 2 * Math.PI);
    ctx.fill();
    
    // DESENHAR INFORMA√á√ïES DO JOGADOR NO CANVAS
    ctx.fillStyle = '#fff';
    ctx.font = '16px Arial';
    ctx.fillText(`N√≠vel ${player.level}`, player.x - 25, player.y - 30);
    
    // DESENHAR T√çTULO DO JOGO
    ctx.fillStyle = '#ffdd44';
    ctx.font = 'bold 24px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Sistema de RPG com HUD', canvas.width / 2, 50);
    
    // DESENHAR INSTRU√á√ïES
    ctx.fillStyle = '#ccc';
    ctx.font = '14px Arial';
    ctx.fillText('Use as setas para mover', canvas.width / 2, canvas.height - 20);
}
