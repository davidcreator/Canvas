// ==========================================
// SE√á√ÉO JAVASCRIPT 1: INICIALIZA√á√ÉO
// ==========================================
// Aguarda o carregamento completo da p√°gina antes de executar o c√≥digo

document.addEventListener("DOMContentLoaded", () => {
    console.log("üéÆ Sistema do jogo iniciado!");

    // ==========================================
    // SE√á√ÉO 2: REFER√äNCIAS DOS ELEMENTOS HTML
    // ==========================================
    // Conecta o JavaScript aos elementos da interface

    const livesCount = document.getElementById("lives-count");      // Elemento que mostra as vidas
    const scoreCount = document.getElementById("score-count");      // Elemento que mostra a pontua√ß√£o
    const powerUpsList = document.getElementById("power-ups-list"); // Elemento que mostra os power-ups
    const currentHealth = document.getElementById("current-health"); // Barra de sa√∫de visual
    const canvas = document.getElementById("gameCanvas");           // √Årea de desenho do jogo
    const ctx = canvas.getContext("2d");                          // Contexto para desenhar no canvas

    // ==========================================
    // SE√á√ÉO 3: VARI√ÅVEIS DE ESTADO DO JOGO
    // ==========================================
    // Armazena todas as informa√ß√µes importantes do jogo

    let estadoJogo = {
        vidas: 3,           // N√∫mero de vidas do jogador
        pontuacao: 0,       // Pontos acumulados
        powerUps: [],       // Lista de power-ups coletados
        saude: 100,         // Sa√∫de atual (0-100)
        saudeMaxima: 100    // Sa√∫de m√°xima poss√≠vel
    };

    // ==========================================
    // SE√á√ÉO 4: FUN√á√ÉO PRINCIPAL DE ATUALIZA√á√ÉO
    // ==========================================
    // Sincroniza os dados do jogo com a interface visual

    function atualizarInterface() {
        console.log("üîÑ Atualizando interface do usu√°rio...");
        
        // Atualiza o contador de vidas
        livesCount.textContent = estadoJogo.vidas;
        
        // Atualiza a pontua√ß√£o
        scoreCount.textContent = estadoJogo.pontuacao.toLocaleString('pt-BR');
        
        // Atualiza a lista de power-ups
        if (estadoJogo.powerUps.length > 0) {
            powerUpsList.textContent = estadoJogo.powerUps.join(", ");
        } else {
            powerUpsList.textContent = "Nenhum";
        }
        
        // Atualiza a barra de sa√∫de visualmente
        const porcentagemSaude = (estadoJogo.saude / estadoJogo.saudeMaxima) * 100;
        currentHealth.style.width = porcentagemSaude + "%";
        
        // Muda a cor da barra baseada na sa√∫de
        if (porcentagemSaude > 60) {
            currentHealth.style.background = "linear-gradient(90deg, #00ff00, #7fff00)"; // Verde
        } else if (porcentagemSaude > 30) {
            currentHealth.style.background = "linear-gradient(90deg, #ffff00, #ffa500)"; // Amarelo
        } else {
            currentHealth.style.background = "linear-gradient(90deg, #ff0000, #ff6666)"; // Vermelho
        }
    }

    // ==========================================
    // SE√á√ÉO 5: FUN√á√ïES DE GAMEPLAY
    // ==========================================
    // Fun√ß√µes que modificam o estado do jogo

    // Fun√ß√£o para aumentar a pontua√ß√£o
    function adicionarPontos(pontos) {
        console.log(`‚ú® +${pontos} pontos adicionados!`);
        estadoJogo.pontuacao += pontos;
        atualizarInterface();
        
        // Efeito visual opcional
        mostrarTextoFlutuante(`+${pontos}`, "green");
    }

    // Fun√ß√£o para o jogador perder uma vida
    function perderVida() {
        if (estadoJogo.vidas > 0) {
            estadoJogo.vidas -= 1;
            console.log(`üíî Vida perdida! Vidas restantes: ${estadoJogo.vidas}`);
            
            if (estadoJogo.vidas === 0) {
                console.log("üíÄ Game Over!");
                alert("Game Over! Clique em 'Reiniciar' para jogar novamente.");
            }
        } else {
            console.log("‚ö†Ô∏è Tentativa de perder vida, mas j√° est√° em 0");
        }
        atualizarInterface();
    }

    // Fun√ß√£o para adicionar um power-up
    function coletarPowerUp(nomePowerUp) {
        console.log(`üöÄ Power-up coletado: ${nomePowerUp}`);
        estadoJogo.powerUps.push(nomePowerUp);
        atualizarInterface();
        
        // Efeito visual
        mostrarTextoFlutuante(`${nomePowerUp} coletado!`, "blue");
    }

    // Fun√ß√£o para modificar a sa√∫de (positivo = cura, negativo = dano)
    function modificarSaude(quantidade) {
        const saudeAnterior = estadoJogo.saude;
        estadoJogo.saude = Math.max(0, Math.min(estadoJogo.saudeMaxima, estadoJogo.saude + quantidade));
        
        if (quantidade > 0) {
            console.log(`üíö Curou ${quantidade} pontos de sa√∫de`);
            mostrarTextoFlutuante(`+${quantidade} HP`, "green");
        } else {
            console.log(`üíî Recebeu ${Math.abs(quantidade)} de dano`);
            mostrarTextoFlutuante(`${quantidade} HP`, "red");
        }
        
        // Se a sa√∫de chegou a zero, perde uma vida
        if (estadoJogo.saude === 0 && saudeAnterior > 0) {
            estadoJogo.saude = estadoJogo.saudeMaxima; // Restaura sa√∫de
            perderVida(); // Perde uma vida
        }
        
        atualizarInterface();
    }

    // ==========================================
    // SE√á√ÉO 6: FUN√á√ïES DE DEMONSTRA√á√ÉO
    // ==========================================
    // Fun√ß√µes conectadas aos bot√µes para testar o sistema

    window.demonstrarPontuacao = function() {
        adicionarPontos(100);
    };

    window.demonstrarDano = function() {
        modificarSaude(-25); // Remove 25 pontos de sa√∫de
    };

    window.demonstrarCura = function() {
        modificarSaude(20); // Adiciona 20 pontos de sa√∫de
    };

    window.demonstrarPowerUp = function() {
        const powerUpsDisponiveis = ["Velocidade", "Escudo", "Tiro Duplo", "Super Pulo", "Invisibilidade"];
        const powerUpAleatorio = powerUpsDisponiveis[Math.floor(Math.random() * powerUpsDisponiveis.length)];
        coletarPowerUp(powerUpAleatorio);
    };

    window.demonstrarPerderVida = function() {
        perderVida();
    };

    // Fun√ß√£o para reiniciar o jogo
    window.reiniciarJogo = function() {
        console.log("üîÑ Reiniciando jogo...");
        estadoJogo = {
            vidas: 3,
            pontuacao: 0,
            powerUps: [],
            saude: 100,
            saudeMaxima: 100
        };
        atualizarInterface();
        limparCanvas();
        mostrarTextoFlutuante("Jogo Reiniciado!", "white");
    };

    // ==========================================
    // SE√á√ÉO 7: FUN√á√ïES DE EFEITOS VISUAIS
    // ==========================================

    function mostrarTextoFlutuante(texto, cor) {
        // Limpa o canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Configura o texto
        ctx.font = "24px Arial";
        ctx.fillStyle = cor;
        ctx.textAlign = "center";
        
        // Desenha o texto no centro do canvas
        ctx.fillText(texto, canvas.width / 2, canvas.height / 2);
        
        // Remove o texto ap√≥s 1 segundo
        setTimeout(() => {
            limparCanvas();
        }, 1000);
    }

    function limparCanvas() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Desenha uma mensagem de boas-vindas
        ctx.font = "18px Arial";
        ctx.fillStyle = "#666";
        ctx.textAlign = "center";
        ctx.fillText("üéÆ √Årea do Jogo", canvas.width / 2, canvas.height / 2 - 20);
        ctx.fillText("Use os bot√µes abaixo para testar as funcionalidades", canvas.width / 2, canvas.height / 2 + 20);
    }

    // ==========================================
    // SE√á√ÉO 8: INICIALIZA√á√ÉO FINAL
    // ==========================================

    // Atualiza a interface pela primeira vez
    atualizarInterface();
    
    // Desenha a mensagem inicial no canvas
    limparCanvas();
    
    console.log("‚úÖ Sistema inicializado com sucesso!");
});