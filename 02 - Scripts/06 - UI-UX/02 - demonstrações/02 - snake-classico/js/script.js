/* =====================================
    üéÆ JOGO DA COBRINHA - C√ìDIGO JAVASCRIPT
    
    Este c√≥digo foi desenvolvido de forma did√°tica
    para facilitar o aprendizado de programa√ß√£o.
    
    AUTOR: Professor
    DATA: 2025
    ===================================== */

// =====================================
// SE√á√ÉO 1: AGUARDAR CARREGAMENTO DA P√ÅGINA
// =====================================

document.addEventListener('DOMContentLoaded', function() {
    console.log('üéÆ Jogo da Cobrinha carregado!');
    inicializarJogo();
});

// =====================================
// SE√á√ÉO 2: ELEMENTOS DOM E VARI√ÅVEIS GLOBAIS
// =====================================

function inicializarJogo() {
    // üéØ ELEMENTOS DA INTERFACE
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const botaoIniciar = document.getElementById('start-button');
    const seletorDificuldade = document.getElementById('difficulty');
    const displayPontuacao = document.getElementById('score');
    const statusJogo = document.getElementById('game-status');

    // üêç VARI√ÅVEIS DO ESTADO DO JOGO
    let cobra = [{ x: 200, y: 200 }];  // Posi√ß√£o inicial da cobra
    let direcao = { x: 0, y: 0 };      // Dire√ß√£o atual da cobra
    let comida = { x: 0, y: 0 };       // Posi√ß√£o da comida
    let pontuacao = 0;                 // Pontos do jogador
    let jogoAtivo = false;             // Se o jogo est√° rodando
    let intervalojogo;                 // Controle do loop do jogo
    let velocidade = 200;              // Velocidade do jogo (ms)

    // üé® CONFIGURA√á√ïES VISUAIS
    const TAMANHO_CELULA = 20;         // Tamanho de cada c√©lula do grid
    const COR_COBRA = '#27ae60';       // Verde para a cobra
    const COR_COMIDA = '#e74c3c';      // Vermelho para a comida
    const COR_FUNDO = '#ecf0f1';       // Cor de fundo do canvas

    // =====================================
    // SE√á√ÉO 3: FUN√á√ïES PRINCIPAIS DO JOGO
    // =====================================

    /**
     * üöÄ FUN√á√ÉO: Iniciar o jogo
     * DESCRI√á√ÉO: Configura e inicia uma nova partida
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function iniciarJogo() {
        console.log('üöÄ Iniciando novo jogo...');
        
        // Reseta todas as vari√°veis para valores iniciais
        reiniciarJogo();
        
        // Define a velocidade baseada na dificuldade escolhida
        definirDificuldade();
        
        // Coloca a primeira comida no canvas
        posicionarComida();
        
        // Atualiza o status na tela
        statusJogo.textContent = 'Jogo em andamento!';
        statusJogo.style.color = '#f39c12';
        
        // Marca o jogo como ativo
        jogoAtivo = true;
        
        // Inicia o loop principal do jogo
        intervalojogo = setInterval(loopPrincipalJogo, velocidade);
    }

    /**
     * üîÑ FUN√á√ÉO: Reiniciar o jogo
     * DESCRI√á√ÉO: Volta todas as vari√°veis ao estado inicial
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function reiniciarJogo() {
        console.log('üîÑ Reiniciando jogo...');
        
        // Reseta a cobra para posi√ß√£o inicial (centro da tela)
        cobra = [{ x: 200, y: 200 }];
        
        // Para a cobra (sem movimento)
        direcao = { x: 0, y: 0 };
        
        // Zera a pontua√ß√£o
        pontuacao = 0;
        displayPontuacao.textContent = pontuacao;
        
        // Para o jogo anterior (se estiver rodando)
        jogoAtivo = false;
        clearInterval(intervalojogo);
        
        // Limpa o canvas
        limparCanvas();
    }

    /**
     * ‚ö° FUN√á√ÉO: Definir dificuldade
     * DESCRI√á√ÉO: Ajusta a velocidade do jogo baseada na escolha do usu√°rio
     * PAR√ÇMETROS: Nenhum (l√™ do select HTML)
     * RETORNO: Nenhum
     */
    function definirDificuldade() {
        const dificuldade = seletorDificuldade.value;
        
        // Quanto menor o n√∫mero, mais r√°pido o jogo
        switch(dificuldade) {
            case 'easy':
                velocidade = 300;  // Mais lento = mais f√°cil
                console.log('üü¢ Dificuldade: F√°cil (300ms)');
                break;
            case 'medium':
                velocidade = 150;  // Velocidade m√©dia
                console.log('üü° Dificuldade: M√©dio (150ms)');
                break;
            case 'hard':
                velocidade = 80;   // Mais r√°pido = mais dif√≠cil
                console.log('üî¥ Dificuldade: Dif√≠cil (80ms)');
                break;
        }
    }

    /**
     * üçé FUN√á√ÉO: Posicionar comida
     * DESCRI√á√ÉO: Coloca uma nova comida em posi√ß√£o aleat√≥ria no grid
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function posicionarComida() {
        // Gera posi√ß√£o aleat√≥ria que seja m√∫ltiplo do tamanho da c√©lula
        comida.x = Math.floor(Math.random() * (canvas.width / TAMANHO_CELULA)) * TAMANHO_CELULA;
        comida.y = Math.floor(Math.random() * (canvas.height / TAMANHO_CELULA)) * TAMANHO_CELULA;
        
        console.log(`üçé Nova comida em: (${comida.x}, ${comida.y})`);
    }

    // =====================================
    // SE√á√ÉO 4: LOOP PRINCIPAL DO JOGO
    // =====================================

    /**
     * üîÑ FUN√á√ÉO: Loop principal do jogo
     * DESCRI√á√ÉO: Executa a cada frame do jogo, controlando toda a l√≥gica
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function loopPrincipalJogo() {
        // Se o jogo n√£o estiver ativo, para aqui
        if (!jogoAtivo) return;
        
        // 1. Move a cobra
        moverCobra();
        
        // 2. Verifica se houve colis√£o
        if (verificarColisao()) {
            // Game Over!
            finalizarJogo();
            return; // Para a execu√ß√£o aqui
        }
        
        // 3. Verifica se a cobra comeu a comida
        if (verificarColisaoComida()) {
            // Aumenta pontua√ß√£o
            pontuacao++;
            displayPontuacao.textContent = pontuacao;
            
            // Posiciona nova comida
            posicionarComida();
            
            // Faz a cobra crescer
            crescerCobra();
            
            console.log(`üèÜ Pontua√ß√£o: ${pontuacao}`);
        }
        
        // 4. Desenha tudo na tela
        desenharJogo();
    }

    // =====================================
    // SE√á√ÉO 5: MOVIMENTO E F√çSICA DA COBRA
    // =====================================

    /**
     * üêç FUN√á√ÉO: Mover cobra
     * DESCRI√á√ÉO: Move a cobra na dire√ß√£o atual
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function moverCobra() {
        // S√≥ move se houver uma dire√ß√£o definida
        if (direcao.x === 0 && direcao.y === 0) return;
        
        // Calcula a nova posi√ß√£o da cabe√ßa
        const novaCabeca = {
            x: cobra[0].x + direcao.x,
            y: cobra[0].y + direcao.y
        };
        
        // Adiciona a nova cabe√ßa no in√≠cio do array
        cobra.unshift(novaCabeca);
        
        // Remove a cauda (√∫ltimo elemento)
        // Isso faz a cobra "mover" mantendo o mesmo tamanho
        cobra.pop();
    }

    /**
     * üí• FUN√á√ÉO: Verificar colis√£o
     * DESCRI√á√ÉO: Verifica se a cobra bateu na parede ou nela mesma
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Boolean (true = houve colis√£o, false = sem colis√£o)
     */
    function verificarColisao() {
        const cabeca = cobra[0];
        
        // COLIS√ÉO COM AS PAREDES
        // Verifica se a cabe√ßa saiu dos limites do canvas
        if (cabeca.x < 0 || cabeca.x >= canvas.width || 
            cabeca.y < 0 || cabeca.y >= canvas.height) {
            console.log('üí• Colis√£o com a parede!');
            return true;
        }
        
        // COLIS√ÉO COM O PR√ìPRIO CORPO
        // Verifica se a cabe√ßa tocou em alguma parte do corpo
        for (let i = 1; i < cobra.length; i++) {
            if (cabeca.x === cobra[i].x && cabeca.y === cobra[i].y) {
                console.log('üí• Cobra bateu no pr√≥prio corpo!');
                return true;
            }
        }
        
        // Sem colis√£o
        return false;
    }

    /**
     * üçé FUN√á√ÉO: Verificar colis√£o com comida
     * DESCRI√á√ÉO: Verifica se a cobra comeu a comida
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Boolean (true = comeu, false = n√£o comeu)
     */
    function verificarColisaoComida() {
        const cabeca = cobra[0];
        
        // Verifica se a posi√ß√£o da cabe√ßa √© igual √† posi√ß√£o da comida
        return cabeca.x === comida.x && cabeca.y === comida.y;
    }

    /**
     * üìà FUN√á√ÉO: Crescer cobra
     * DESCRI√á√ÉO: Aumenta o tamanho da cobra adicionando um segmento
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function crescerCobra() {
        // Pega a posi√ß√£o da cauda atual
        const cauda = { ...cobra[cobra.length - 1] };
        
        // Adiciona um novo segmento na posi√ß√£o da cauda
        cobra.push(cauda);
        
        console.log(`üêç Cobra cresceu! Tamanho atual: ${cobra.length}`);
    }

    // =====================================
    // SE√á√ÉO 6: RENDERIZA√á√ÉO E DESENHO
    // =====================================

    /**
     * üé® FUN√á√ÉO: Desenhar jogo
     * DESCRI√á√ÉO: Desenha todos os elementos do jogo no canvas
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function desenharJogo() {
        // Limpa o canvas inteiro
        limparCanvas();
        
        // Desenha a cobra
        desenharCobra();
        
        // Desenha a comida
        desenharComida();
    }

    /**
     * üßπ FUN√á√ÉO: Limpar canvas
     * DESCRI√á√ÉO: Limpa todo o canvas e aplica cor de fundo
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function limparCanvas() {
        // Define a cor de fundo
        ctx.fillStyle = COR_FUNDO;
        
        // Preenche todo o canvas com a cor de fundo
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    /**
     * üêç FUN√á√ÉO: Desenhar cobra
     * DESCRI√á√ÉO: Desenha todos os segmentos da cobra
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function desenharCobra() {
        cobra.forEach(function(segmento, indice) {
            // Cabe√ßa tem cor mais escura
            if (indice === 0) {
                ctx.fillStyle = '#1e8449'; // Verde mais escuro para a cabe√ßa
            } else {
                ctx.fillStyle = COR_COBRA;  // Verde normal para o corpo
            }
            
            // Desenha o segmento
            ctx.fillRect(segmento.x, segmento.y, TAMANHO_CELULA, TAMANHO_CELULA);
            
            // Adiciona uma borda para melhor visualiza√ß√£o
            ctx.strokeStyle = '#145a32';
            ctx.lineWidth = 1;
            ctx.strokeRect(segmento.x, segmento.y, TAMANHO_CELULA, TAMANHO_CELULA);
        });
    }

    /**
     * üçé FUN√á√ÉO: Desenhar comida
     * DESCRI√á√ÉO: Desenha a comida no canvas
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function desenharComida() {
        // Define a cor da comida
        ctx.fillStyle = COR_COMIDA;
        
        // Desenha a comida como um c√≠rculo para diferenciar da cobra
        ctx.beginPath();
        ctx.arc(
            comida.x + TAMANHO_CELULA/2, 
            comida.y + TAMANHO_CELULA/2, 
            TAMANHO_CELULA/2 - 2, 
            0, 
            2 * Math.PI
        );
        ctx.fill();
        
        // Adiciona um brilho na comida
        ctx.fillStyle = '#ff6b6b';
        ctx.beginPath();
        ctx.arc(
            comida.x + TAMANHO_CELULA/2 - 3, 
            comida.y + TAMANHO_CELULA/2 - 3, 
            3, 
            0, 
            2 * Math.PI
        );
        ctx.fill();
    }

    // =====================================
    // SE√á√ÉO 7: CONTROLES DO TECLADO
    // =====================================

    /**
     * ‚å®Ô∏è FUN√á√ÉO: Controlar cobra
     * DESCRI√á√ÉO: Captura as teclas pressionadas e move a cobra
     * PAR√ÇMETROS: event (evento do teclado)
     * RETORNO: Nenhum
     */
    function controlarCobra(event) {
        // S√≥ aceita comandos se o jogo estiver ativo
        if (!jogoAtivo) return;
        
        // Verifica qual tecla foi pressionada
        switch(event.key) {
            case 'ArrowUp':
                // S√≥ muda dire√ß√£o se n√£o estiver movendo para baixo
                if (direcao.y !== TAMANHO_CELULA) {
                    direcao = { x: 0, y: -TAMANHO_CELULA };
                    console.log('‚¨ÜÔ∏è Movendo para cima');
                }
                break;
                
            case 'ArrowDown':
                // S√≥ muda dire√ß√£o se n√£o estiver movendo para cima
                if (direcao.y !== -TAMANHO_CELULA) {
                    direcao = { x: 0, y: TAMANHO_CELULA };
                    console.log('‚¨áÔ∏è Movendo para baixo');
                }
                break;
                
            case 'ArrowLeft':
                // S√≥ muda dire√ß√£o se n√£o estiver movendo para direita
                if (direcao.x !== TAMANHO_CELULA) {
                    direcao = { x: -TAMANHO_CELULA, y: 0 };
                    console.log('‚¨ÖÔ∏è Movendo para esquerda');
                }
                break;
                
            case 'ArrowRight':
                // S√≥ muda dire√ß√£o se n√£o estiver movendo para esquerda
                if (direcao.x !== -TAMANHO_CELULA) {
                    direcao = { x: TAMANHO_CELULA, y: 0 };
                    console.log('‚û°Ô∏è Movendo para direita');
                }
                break;
        }
        
        // Previne o comportamento padr√£o das setas (rolar p√°gina)
        event.preventDefault();
    }

    // =====================================
    // SE√á√ÉO 8: FINALIZA√á√ÉO DO JOGO
    // =====================================

    /**
     * üíÄ FUN√á√ÉO: Finalizar jogo
     * DESCRI√á√ÉO: Encerra o jogo e mostra mensagem de game over
     * PAR√ÇMETROS: Nenhum
     * RETORNO: Nenhum
     */
    function finalizarJogo() {
        // Para o loop do jogo
        jogoAtivo = false;
        clearInterval(intervalojogo);
        
        // Atualiza o status
        statusJogo.textContent = 'Game Over!';
        statusJogo.style.color = '#e74c3c';
        
        // Mostra mensagem de game over
        setTimeout(function() {
            alert(`üéÆ Game Over!\n\nüèÜ Sua pontua√ß√£o final: ${pontuacao} pontos\n\nüîÑ Clique em "Iniciar Jogo" para jogar novamente!`);
        }, 100);
        
        console.log(`üíÄ Fim de jogo! Pontua√ß√£o final: ${pontuacao}`);
    }

    // =====================================
    // SE√á√ÉO 9: EVENT LISTENERS (EVENTOS)
    // =====================================

    // Evento do bot√£o iniciar
    botaoIniciar.addEventListener('click', iniciarJogo);
    
    // Evento do teclado para controlar a cobra
    document.addEventListener('keydown', controlarCobra);
    
    // =====================================
    // SE√á√ÉO 10: INICIALIZA√á√ÉO
    // =====================================
    
    // Desenha o canvas vazio na inicializa√ß√£o
    limparCanvas();
    statusJogo.textContent = 'Pronto para jogar!';
    statusJogo.style.color = '#27ae60';
    
    console.log('‚úÖ Jogo inicializado com sucesso!');
}