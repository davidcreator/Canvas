// === JAVASCRIPT DO JOGO ===

/**
 * üì¶ VARI√ÅVEIS GLOBAIS
 * Array que armazena todos os objetos (pe√ßas) do jogo
 */
var myGamePieces = [];

/**
 * üéØ FUN√á√ÉO PRINCIPAL - INICIAR O JOGO
 * Esta fun√ß√£o cria os objetos do jogo e inicia a anima√ß√£o
 */
function startGame() {
    // Para qualquer jogo em andamento
    if (myGameArea.interval) {
        clearInterval(myGameArea.interval);
    }
    
    // Limpa qualquer jogo anterior
    myGamePieces = [];
    
    // üé® CRIANDO OS OBJETOS DO JOGO
    // Par√¢metros: (largura, altura, cor, posi√ß√£o X, posi√ß√£o Y, for√ßa do bounce)
    
    myGamePieces.push(new component(30, 30, "red", 80, 75, 0.6));      // Vermelho - bounce m√©dio
    myGamePieces.push(new component(30, 30, "blue", 130, 75, 0.8));    // Azul - bounce forte  
    myGamePieces.push(new component(30, 30, "green", 180, 75, 0.4));   // Verde - bounce fraco
    myGamePieces.push(new component(30, 30, "yellow", 230, 75, 1.0));  // Amarelo - bounce m√°ximo
    
    // Inicia a √°rea de jogo (ou reinicia se j√° existe)
    myGameArea.start();
}

/**
 * ‚èπÔ∏è FUN√á√ÉO PARA PARAR O JOGO
 */
function stopGame() {
    myGameArea.stop();
}

/**
 * üîÑ FUN√á√ÉO PARA REINICIAR O JOGO
 */
function restartGame() {
    myGameArea.stop();
    myGameArea.clear();
    startGame();
}

/**
 * üéÆ OBJETO DA √ÅREA DO JOGO
 * Controla o canvas onde o jogo acontece
 */
var myGameArea = {
    canvas: null,
    context: null,
    interval: null,
    
    // üöÄ Inicia a √°rea do jogo
    start: function() {
        // Se o canvas ainda n√£o existe, cria ele
        if (!this.canvas) {
            this.canvas = document.createElement("canvas");
            this.canvas.width = 500;   // Largura da tela do jogo
            this.canvas.height = 300;  // Altura da tela do jogo
            this.context = this.canvas.getContext("2d");
            
            // Adiciona o canvas na p√°gina
            document.body.appendChild(this.canvas);
        }
        
        // Para qualquer anima√ß√£o anterior
        if (this.interval) {
            clearInterval(this.interval);
        }
        
        // Limpa a tela
        this.clear();
        
        // Define um intervalo para atualizar o jogo 50 vezes por segundo
        this.interval = setInterval(updateGameArea, 20);
    },
    
    // ‚èπÔ∏è Para o jogo
    stop: function() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
        }
    },
    
    // üßπ Limpa a tela para redesenhar
    clear: function() {
        if (this.context) {
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }
    }
};

/**
 * üß± CONSTRUTOR DE COMPONENTES (OBJETOS DO JOGO)
 * Esta fun√ß√£o cria cada objeto saltitante
 */
function component(width, height, color, x, y, bounce) {
    // üìè PROPRIEDADES DE TAMANHO
    this.originalWidth = width;    // Largura original (para restaurar ap√≥s deforma√ß√£o)
    this.originalHeight = height;  // Altura original (para restaurar ap√≥s deforma√ß√£o)
    this.width = width;           // Largura atual
    this.height = height;         // Altura atual
    
    // üìç PROPRIEDADES DE POSI√á√ÉO
    this.x = x;  // Posi√ß√£o horizontal
    this.y = y;  // Posi√ß√£o vertical
    
    // üèÉ‚Äç‚ôÇÔ∏è PROPRIEDADES DE MOVIMENTO
    this.speedX = Math.random() * 4 - 2; // Velocidade horizontal aleat√≥ria (-2 a +2)
    this.speedY = Math.random() * 4 - 2; // Velocidade vertical aleat√≥ria (-2 a +2)
    
    // üåç PROPRIEDADES DE F√çSICA
    this.gravity = 0.15;      // For√ßa da gravidade
    this.gravitySpeed = 0;    // Velocidade acumulada da gravidade
    this.bounce = bounce;     // For√ßa do salto (0 a 1)
    
    // üé® COR DO OBJETO
    this.color = color;
    
    /**
     * üñºÔ∏è M√âTODO PARA DESENHAR O OBJETO NA TELA
     */
    this.update = function() {
        let ctx = myGameArea.context;
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
    };
    
    /**
     * üìç M√âTODO PARA CALCULAR NOVA POSI√á√ÉO
     */
    this.newPos = function() {
        // Aplica gravidade (acelera para baixo)
        this.gravitySpeed += this.gravity;
        
        // Move o objeto
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        
        // Verifica se bateu nas bordas
        this.hitBoundaries();
    };
    
    /**
     * üöß M√âTODO PARA DETECTAR COLIS√ÉO COM BORDAS
     */
    this.hitBoundaries = function() {
        // Calcula os limites da tela
        let rockbottom = myGameArea.canvas.height - this.height;  // Ch√£o
        let rightBoundary = myGameArea.canvas.width - this.width; // Parede direita
        let leftBoundary = 0;  // Parede esquerda
        let ceiling = 0;       // Teto
        
        // üîΩ COLIS√ÉO COM CH√ÉO OU TETO
        if (this.y > rockbottom) {
            this.y = rockbottom;
            this.gravitySpeed = -(this.gravitySpeed * this.bounce); // Inverte e reduz velocidade
            this.stretch(true); // Deforma verticalmente
        } else if (this.y < ceiling) {
            this.y = ceiling;
            this.gravitySpeed = -(this.gravitySpeed * this.bounce);
            this.stretch(true);
        }
        
        // ‚ÜîÔ∏è COLIS√ÉO COM PAREDES LATERAIS  
        if (this.x > rightBoundary) {
            this.x = rightBoundary;
            this.speedX = -(this.speedX * this.bounce); // Inverte dire√ß√£o horizontal
            this.stretch(false); // Deforma horizontalmente
        } else if (this.x < leftBoundary) {
            this.x = leftBoundary;
            this.speedX = -(this.speedX * this.bounce);
            this.stretch(false);
        }
    };
    
    /**
     * üí• M√âTODO PARA DETECTAR COLIS√ÉO ENTRE OBJETOS
     */
    this.collisionWith = function(other) {
        // Define os limites deste objeto
        let myleft = this.x;
        let myright = this.x + this.width;
        let mytop = this.y;
        let mybottom = this.y + this.height;
        
        // Define os limites do outro objeto
        let otherleft = other.x;
        let otherright = other.x + other.width;
        let othertop = other.y;
        let otherbottom = other.y + other.height;
        
        // Verifica se N√ÉO est√£o colidindo
        let collision = true;
        if ((mybottom < othertop) ||    // Este est√° acima do outro
            (mytop > otherbottom) ||    // Este est√° abaixo do outro
            (myright < otherleft) ||    // Este est√° √† esquerda do outro
            (myleft > otherright)) {    // Este est√° √† direita do outro
            collision = false;
        }
        return collision;
    };
    
    /**
     * ü§∏‚Äç‚ôÇÔ∏è M√âTODO PARA DEFORMAR O OBJETO DURANTE COLIS√ÉO
     */
    this.stretch = function(vertical) {
        if (vertical) {
            // Deforma√ß√£o vertical (bate no ch√£o/teto)
            this.height = this.originalHeight * 1.3; // Estica 30% na vertical
            this.width = this.originalWidth * 0.7;   // Encolhe 30% na horizontal
        } else {
            // Deforma√ß√£o horizontal (bate na parede)
            this.height = this.originalHeight * 0.7; // Encolhe 30% na vertical  
            this.width = this.originalWidth * 1.3;   // Estica 30% na horizontal
        }
        
        // Restaura o tamanho original ap√≥s 200ms
        setTimeout(() => {
            this.width = this.originalWidth;
            this.height = this.originalHeight;
        }, 200);
    };
}

/**
 * üîÑ FUN√á√ÉO PRINCIPAL DE ATUALIZA√á√ÉO DO JOGO
 * Esta fun√ß√£o √© chamada 50 vezes por segundo
 */
function updateGameArea() {
    // Limpa a tela
    myGameArea.clear();
    
    // Para cada objeto do jogo...
    for (let i = 0; i < myGamePieces.length; i++) {
        let piece = myGamePieces[i];
        
        // Verifica colis√£o com todos os outros objetos
        for (let j = 0; j < myGamePieces.length; j++) {
            if (i !== j) { // N√£o verifica colis√£o consigo mesmo
                let otherPiece = myGamePieces[j];
                
                // Se colidiu com outro objeto...
                if (piece.collisionWith(otherPiece)) {
                    // Inverte a dire√ß√£o de ambos os objetos
                    piece.speedX = -piece.speedX;
                    piece.speedY = -piece.speedY;
                    otherPiece.speedX = -otherPiece.speedX;
                    otherPiece.speedY = -otherPiece.speedY;
                    
                    // Aplica deforma√ß√£o em ambos
                    piece.stretch(true);
                    otherPiece.stretch(true);
                    
                    // Separa os objetos para evitar que fiquem "grudados"
                    if (piece.x < otherPiece.x) {
                        piece.x -= 2;
                        otherPiece.x += 2;
                    } else {
                        piece.x += 2;
                        otherPiece.x -= 2;
                    }
                }
            }
        }
        
        // Atualiza posi√ß√£o e desenha o objeto
        piece.newPos();
        piece.update();
    }
}

// üöÄ INICIA O JOGO AUTOMATICAMENTE QUANDO A P√ÅGINA CARREGA
window.onload = function() {
    startGame();
};