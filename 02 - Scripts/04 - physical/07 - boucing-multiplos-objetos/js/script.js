// === VARI√ÅVEIS GLOBAIS ===
var myGamePieces = []; // Array que armazena todos os objetos do jogo
var gameRunning = false; // Controla se o jogo est√° rodando

// === OBJETO DA √ÅREA DO JOGO ===
var myGameArea = {
    canvas: document.createElement("canvas"), // Cria o elemento canvas
    
    // Fun√ß√£o para inicializar a √°rea do jogo
    start: function() {
        console.log("üéÆ Iniciando √°rea do jogo...");
        
        // Configura√ß√µes do canvas
        this.canvas.width = 600;  // Largura aumentada para melhor visualiza√ß√£o
        this.canvas.height = 400; // Altura aumentada
        this.context = this.canvas.getContext("2d");
        
        // Insere o canvas na p√°gina
        document.querySelector('.container').appendChild(this.canvas);
        
        // Inicia o loop de atualiza√ß√£o (60 FPS aproximadamente)
        this.interval = setInterval(updateGameArea, 16);
        gameRunning = true;
        
        // Atualiza os bot√µes
        document.getElementById('startBtn').disabled = true;
        document.getElementById('stopBtn').disabled = false;
    },
    
    // Fun√ß√£o para parar o jogo
    stop: function() {
        console.log("‚èπÔ∏è Parando simula√ß√£o...");
        clearInterval(this.interval);
        gameRunning = false;
        
        // Atualiza os bot√µes
        document.getElementById('startBtn').disabled = false;
        document.getElementById('stopBtn').disabled = true;
    },
    
    // Fun√ß√£o para limpar o canvas
    clear: function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
};

// === FUN√á√ÉO CONSTRUTORA PARA COMPONENTES ===
function component(width, height, color, x, y, bounce) {
    console.log(`üü¶ Criando componente ${color} com bounce: ${bounce}`);
    
    // Propriedades f√≠sicas do objeto
    this.width = width;        // Largura
    this.height = height;      // Altura
    this.x = x;               // Posi√ß√£o horizontal
    this.y = y;               // Posi√ß√£o vertical inicial
    this.speedX = 0;          // Velocidade horizontal
    this.speedY = 0;          // Velocidade vertical
    this.gravity = 0.15;      // For√ßa da gravidade (aumentada)
    this.gravitySpeed = 0;    // Velocidade causada pela gravidade
    this.bounce = bounce;     // Fator de salto (0 a 1)
    this.color = color;       // Cor do objeto

    // === M√âTODO PARA DESENHAR O COMPONENTE ===
    this.update = function() {
        let ctx = myGameArea.context;
        
        // Desenha o ret√¢ngulo
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        // Adiciona uma borda para melhor visualiza√ß√£o
        ctx.strokeStyle = "#333";
        ctx.lineWidth = 1;
        ctx.strokeRect(this.x, this.y, this.width, this.height);
        
        // Adiciona texto com o valor do bounce
        ctx.fillStyle = "white";
        ctx.font = "12px Arial";
        ctx.textAlign = "center";
        ctx.fillText(
            this.bounce.toString(), 
            this.x + this.width/2, 
            this.y + this.height/2 + 4
        );
    };

    // === M√âTODO PARA CALCULAR NOVA POSI√á√ÉO ===
    this.newPos = function() {
        // Aplica a gravidade
        this.gravitySpeed += this.gravity;
        
        // Atualiza posi√ß√µes
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        
        // Verifica colis√£o com o fundo
        this.hitBottom();
    };

    // === M√âTODO PARA DETECTAR COLIS√ÉO COM O CH√ÉO ===
    this.hitBottom = function() {
        // Calcula a posi√ß√£o do "ch√£o" para este objeto
        let rockbottom = myGameArea.canvas.height - this.height;
        
        // Verifica se o objeto atingiu o ch√£o
        if (this.y > rockbottom) {
            this.y = rockbottom; // Reposiciona no ch√£o
            
            // Aplica o efeito bounce (inverte a velocidade e multiplica pelo fator de salto)
            this.gravitySpeed = -(this.gravitySpeed * this.bounce);
            
            console.log(`üí• ${this.color} bateu no ch√£o! Bounce: ${this.bounce}`);
        }
    };
}

// === FUN√á√ÉO PARA INICIAR O JOGO ===
function startGame() {
    console.log("üöÄ Iniciando jogo...");
    
    // Limpa objetos anteriores
    myGamePieces = [];
    
    // Cria os componentes com diferentes propriedades de bounce
    // Par√¢metros: largura, altura, cor, posi√ß√£o X, posi√ß√£o Y, fator de bounce
    myGamePieces.push(new component(40, 40, "red", 100, 50, 0.6));      // Bounce m√©dio-baixo
    myGamePieces.push(new component(40, 40, "blue", 200, 80, 0.8));     // Bounce alto
    myGamePieces.push(new component(40, 40, "green", 300, 30, 0.4));    // Bounce baixo
    myGamePieces.push(new component(40, 40, "yellow", 400, 60, 1.0));   // Bounce perfeito
    
    // Inicia a √°rea do jogo
    myGameArea.start();
}

// === FUN√á√ÉO PARA PARAR O JOGO ===
function stopGame() {
    myGameArea.stop();
}

// === FUN√á√ÉO PARA REINICIAR O JOGO ===
function resetGame() {
    console.log("üîÑ Reiniciando jogo...");
    
    // Para o jogo atual
    if (gameRunning) {
        myGameArea.stop();
    }
    
    // Remove o canvas atual se existir
    if (myGameArea.canvas.parentNode) {
        myGameArea.canvas.parentNode.removeChild(myGameArea.canvas);
    }
    
    // Recria o canvas
    myGameArea.canvas = document.createElement("canvas");
    
    // Limpa os objetos
    myGamePieces = [];
    
    // Reabilita o bot√£o de start
    document.getElementById('startBtn').disabled = false;
    document.getElementById('stopBtn').disabled = true;
}

// === FUN√á√ÉO PRINCIPAL DE ATUALIZA√á√ÉO ===
function updateGameArea() {
    // Limpa a tela
    myGameArea.clear();
    
    // Atualiza cada objeto do jogo
    for (let i = 0; i < myGamePieces.length; i++) {
        myGamePieces[i].newPos();  // Calcula nova posi√ß√£o
        myGamePieces[i].update();  // Desenha o objeto
    }
}

// === INICIALIZA√á√ÉO AUTOM√ÅTICA ===
// O jogo n√£o inicia automaticamente para dar controle ao professor/aluno
console.log("üìñ Simulador carregado! Clique em 'Iniciar Simula√ß√£o' para come√ßar.");