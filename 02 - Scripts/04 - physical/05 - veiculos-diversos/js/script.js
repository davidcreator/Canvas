/* =================================
    VARI√ÅVEIS GLOBAIS
    ================================= */

// Array que armazena todos os ve√≠culos da simula√ß√£o
var veiculos = [];

/* =================================
    FUN√á√ÉO PRINCIPAL DE INICIALIZA√á√ÉO
    ================================= */

/**
 * Fun√ß√£o que inicia toda a simula√ß√£o
 * Cria os ve√≠culos com suas caracter√≠sticas espec√≠ficas e inicia a √°rea de simula√ß√£o
 */
function iniciarSimulacao() {
    console.log("üöÄ Iniciando simula√ß√£o de ve√≠culos...");
    
    // Criando cada ve√≠culo com par√¢metros espec√≠ficos:
    // Par√¢metros: (tipo, largura, altura, cor, posX, posY, acelera√ß√£o, atrito)
    
    veiculos.push(new Veiculo("Carro", 50, 30, "red", 30, 50, 0.2, 0.05));
    veiculos.push(new Veiculo("Moto", 30, 20, "blue", 30, 100, 0.3, 0.03)); 
    veiculos.push(new Veiculo("Caminh√£o", 70, 40, "green", 30, 150, 0.1, 0.07));
    veiculos.push(new Veiculo("Bicicleta", 25, 15, "yellow", 30, 200, 0.35, 0.02));
    veiculos.push(new Veiculo("√înibus", 80, 45, "purple", 30, 250, 0.15, 0.06));
    
    // Iniciar a √°rea de simula√ß√£o
    areaSimulacao.iniciar();
}

/* =================================
    OBJETO GERENCIADOR DA SIMULA√á√ÉO
    ================================= */

/**
 * Objeto respons√°vel por gerenciar a √°rea de simula√ß√£o (canvas)
 * Controla a cria√ß√£o, atualiza√ß√£o e limpeza da tela
 */
var areaSimulacao = {
    canvas: document.createElement("canvas"),
    
    /**
     * Inicia a simula√ß√£o criando o canvas e definindo o loop de anima√ß√£o
     */
    iniciar: function() {
        console.log("üé® Criando √°rea de simula√ß√£o...");
        
        // Configura√ß√µes do canvas
        this.canvas.width = 640;
        this.canvas.height = 320;
        this.context = this.canvas.getContext("2d");
        
        // Inserir o canvas na p√°gina
        document.querySelector('.area-simulacao').appendChild(this.canvas);
        
        // Iniciar loop de anima√ß√£o (atualiza a cada 20 milissegundos = 50 FPS)
        this.intervalo = setInterval(atualizarSimulacao, 20);
    },
    
    /**
     * Para a simula√ß√£o
     */
    parar: function() {
        clearInterval(this.intervalo);
    },
    
    /**
     * Limpa toda a tela para o pr√≥ximo frame
     */
    limpar: function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
};

/* =================================
    CLASSE CONSTRUTOR DE VE√çCULOS
    ================================= */

/**
 * Construtor para criar objetos ve√≠culo
 * @param {string} tipo - Nome do tipo de ve√≠culo
 * @param {number} largura - Largura do ve√≠culo em pixels
 * @param {number} altura - Altura do ve√≠culo em pixels  
 * @param {string} cor - Cor do ve√≠culo
 * @param {number} x - Posi√ß√£o horizontal inicial
 * @param {number} y - Posi√ß√£o vertical inicial
 * @param {number} aceleracao - Taxa de acelera√ß√£o do ve√≠culo
 * @param {number} atrito - Coeficiente de atrito (resist√™ncia)
 */
function Veiculo(tipo, largura, altura, cor, x, y, aceleracao, atrito) {
    // Propriedades f√≠sicas do ve√≠culo
    this.tipo = tipo;
    this.largura = largura;
    this.altura = altura;
    this.cor = cor;
    
    // Propriedades de posi√ß√£o e movimento
    this.x = x;
    this.y = y;
    this.velocidade = 0;
    
    // Propriedades f√≠sicas de movimento
    this.aceleracao = aceleracao;
    this.atrito = atrito;
    
    /**
     * Desenha o ve√≠culo na tela
     * Renderiza o ret√¢ngulo colorido e o nome do ve√≠culo
     */
    this.desenhar = function() {
        var ctx = areaSimulacao.context;
        
        // Desenhar o corpo do ve√≠culo
        ctx.fillStyle = this.cor;
        ctx.fillRect(this.x, this.y, this.largura, this.altura);
        
        // Adicionar borda para melhor visibilidade
        ctx.strokeStyle = "black";
        ctx.lineWidth = 2;
        ctx.strokeRect(this.x, this.y, this.largura, this.altura);
        
        // Desenhar o nome do ve√≠culo acima dele
        ctx.fillStyle = "black";
        ctx.font = "bold 12px Arial";
        ctx.textAlign = "center";
        ctx.fillText(this.tipo, this.x + this.largura/2, this.y - 5);
        
        // Mostrar velocidade atual (para fins educativos)
        ctx.font = "10px Arial";
        ctx.fillStyle = "navy";
        ctx.fillText("V: " + Math.abs(this.velocidade).toFixed(1), 
                    this.x + this.largura/2, this.y + this.altura + 15);
    };
    
    /**
     * Atualiza a posi√ß√£o do ve√≠culo baseado na f√≠sica
     * Aplica atrito e move o ve√≠culo baseado na velocidade atual
     */
    this.atualizarPosicao = function() {
        // Aplicar atrito (reduz a velocidade gradualmente)
        this.velocidade *= (1 - this.atrito);
        
        // Parar o ve√≠culo se a velocidade for muito baixa (evita vibra√ß√£o)
        if (Math.abs(this.velocidade) < 0.01) {
            this.velocidade = 0;
        }
        
        // Atualizar posi√ß√£o baseada na velocidade
        this.x += this.velocidade;
        
        // Verificar colis√£o com as bordas
        this.verificarColisaoBordas();
    };
    
    /**
     * Acelera o ve√≠culo para frente
     * Aumenta a velocidade baseada na acelera√ß√£o do ve√≠culo
     */
    this.acelerar = function() {
        this.velocidade += this.aceleracao;
        console.log(`üöÄ ${this.tipo} acelerando! Velocidade: ${this.velocidade.toFixed(2)}`);
    };
    
    /**
     * Freia o ve√≠culo
     * Reduz a velocidade baseada na acelera√ß√£o do ve√≠culo
     */
    this.frenar = function() {
        this.velocidade -= this.aceleracao;
        console.log(`üõë ${this.tipo} freando! Velocidade: ${this.velocidade.toFixed(2)}`);
    };
    
    /**
     * Verifica e resolve colis√µes com as bordas da tela
     * Impede que o ve√≠culo saia dos limites da simula√ß√£o
     */
    this.verificarColisaoBordas = function() {
        // Colidir com borda direita
        if (this.x + this.largura > areaSimulacao.canvas.width) {
            this.x = areaSimulacao.canvas.width - this.largura;
            this.velocidade = 0; // Parar ao colidir
        }
        
        // Colidir com borda esquerda  
        if (this.x < 0) {
            this.x = 0;
            this.velocidade = 0; // Parar ao colidir
        }
    };
}

/* =================================
    LOOP PRINCIPAL DA SIMULA√á√ÉO
    ================================= */

/**
 * Fun√ß√£o que atualiza toda a simula√ß√£o a cada frame
 * Limpa a tela, atualiza posi√ß√µes e redesenha todos os ve√≠culos
 */
function atualizarSimulacao() {
    // Limpar a tela
    areaSimulacao.limpar();
    
    // Atualizar cada ve√≠culo
    for (var i = 0; i < veiculos.length; i++) {
        veiculos[i].atualizarPosicao();
        veiculos[i].desenhar();
    }
}

/* =================================
    SISTEMA DE CONTROLES POR TECLADO
    ================================= */

/**
 * Gerencia as entradas do teclado para controlar os ve√≠culos
 * Mapeia teclas espec√≠ficas para cada ve√≠culo
 */
window.addEventListener('keydown', function (evento) {
    var tecla = evento.key;
    
    // Mapear teclas para a√ß√µes dos ve√≠culos
    switch (tecla) {
        // Controles do Carro (vermelho) - √≠ndice 0
        case 'ArrowRight':
            veiculos[0].acelerar();
            break;
        case 'ArrowLeft':
            veiculos[0].frenar();
            break;
            
        // Controles da Moto (azul) - √≠ndice 1
        case 'd':
        case 'D':
            veiculos[1].acelerar();
            break;
        case 'a':
        case 'A':
            veiculos[1].frenar();
            break;
            
        // Controles do Caminh√£o (verde) - √≠ndice 2
        case 'ArrowUp':
            veiculos[2].acelerar();
            break;
        case 'ArrowDown':
            veiculos[2].frenar();
            break;
            
        // Controles da Bicicleta (amarela) - √≠ndice 3
        case 'w':
        case 'W':
            veiculos[3].acelerar();
            break;
        case 's':
        case 'S':
            veiculos[3].frenar();
            break;
            
        // Controles do √înibus (roxo) - √≠ndice 4
        case 'e':
        case 'E':
            veiculos[4].acelerar();
            break;
        case 'q':
        case 'Q':
            veiculos[4].frenar();
            break;
    }
    
    // Prevenir comportamento padr√£o das setas
    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(tecla)) {
        evento.preventDefault();
    }
});

/* =================================
    INFORMA√á√ïES PARA DEBUG (OPCIONAL)
    ================================= */

console.log("üéì Simula√ß√£o Did√°tica de Ve√≠culos carregada!");
console.log("üìä Esta simula√ß√£o demonstra conceitos de:");
console.log("   ‚Ä¢ Acelera√ß√£o e velocidade");
console.log("   ‚Ä¢ Atrito e resist√™ncia"); 
console.log("   ‚Ä¢ In√©rcia de diferentes massas");
console.log("   ‚Ä¢ Colis√µes e limites f√≠sicos");